#!/usr/bin/env python3
"""
Integration script for LLM diversification into the rearrangement generation pipeline

This script modifies the existing rearrangement generation pipeline to include
LLM-based expression diversification as an optional step.
"""

import os
import json
import argparse
import subprocess
import sys
from typing import Dict, Any, List

def load_pipeline_config(config_file: str = None) -> Dict[str, Any]:
    """Load pipeline configuration"""
    default_config = {
        "llm_diversification": {
            "enabled": False,
            "providers": {
                "openai": {
                    "enabled": False,
                    "api_key": None,
                    "models": ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"]
                },
                "anthropic": {
                    "enabled": False,
                    "api_key": None,
                    "models": ["claude-3-opus-20240229", "claude-3-sonnet-20240229"]
                }
            },
            "settings": {
                "max_variations": 2,
                "temperature": 0.8,
                "max_pairs_per_run": 50,
                "delay_between_requests": 1.0
            }
        }
    }
    
    if config_file and os.path.exists(config_file):
        with open(config_file, 'r') as f:
            user_config = json.load(f)
            # Merge with defaults
            for key, value in user_config.items():
                if key in default_config:
                    if isinstance(value, dict) and isinstance(default_config[key], dict):
                        default_config[key].update(value)
                    else:
                        default_config[key] = value
                else:
                    default_config[key] = value
    
    return default_config

def create_diversified_pipeline_script(config: Dict[str, Any]) -> str:
    """Create a modified rearrangement generation script with LLM diversification"""
    
    base_script = """#!/bin/bash
# Enhanced rearrangement generation pipeline with LLM diversification
# Generated by integrate_llm_diversification.py

set -e

# Configuration
OUTPUT_DIR="../custom_clevr/output"
SCENES_FILE="$OUTPUT_DIR/clevr_ref+_scenes.json"
REFEXPS_FILE="$OUTPUT_DIR/clevr_ref+_base_refexps.json"
BASE_REARRANGEMENTS_FILE="$OUTPUT_DIR/clevr_ref+_rearrangements.json"

echo "=== Enhanced Rearrangement Generation Pipeline ==="
echo "Starting at $(date)"

# Step 1: Generate base rearrangement expressions
echo "Step 1: Generating base rearrangement expressions..."
python generate_rearrangement_expressions.py \\
    --input_refexps_file $REFEXPS_FILE \\
    --input_scenes_file $SCENES_FILE \\
    --output_rearrangement_file $BASE_REARRANGEMENTS_FILE \\
    --num_refexps 100 \\
    --rearrangements_per_refexp 1 \\
    --verbose

echo "Generated $(python -c "import json; data=json.load(open('$BASE_REARRANGEMENTS_FILE')); print(len(data.get('expression_pairs', [])))" 2>/dev/null || echo "?") rearrangement pairs"

"""
    
    # Add LLM diversification step if enabled
    if config.get("llm_diversification", {}).get("enabled", False):
        base_script += """
# Step 2: LLM Diversification
echo "Step 2: LLM Diversification of rearrangement expressions..."
"""
        
        # Add diversification for each enabled provider
        providers = config["llm_diversification"]["providers"]
        settings = config["llm_diversification"]["settings"]
        
        for provider_name, provider_config in providers.items():
            if provider_config.get("enabled", False) and provider_config.get("api_key"):
                for model in provider_config.get("models", []):
                    output_suffix = f"_{provider_name}_{model.replace('-', '_')}"
                    output_file = f"$OUTPUT_DIR/clevr_ref+_rearrangements_diversified{output_suffix}.json"
                    
                    base_script += f"""
# Diversify with {provider_name} {model}
echo "Diversifying with {provider_name} {model}..."
python llm_diversify_rearrangements.py \\
    --rearrangements_file $BASE_REARRANGEMENTS_FILE \\
    --scenes_file $SCENES_FILE \\
    --output_file {output_file} \\
    --llm_provider {provider_name} \\
    --model_name {model} \\
    --api_key {provider_config['api_key']} \\
    --max_variations {settings['max_variations']} \\
    --temperature {settings['temperature']} \\
    --max_pairs {settings['max_pairs_per_run']} \\
    --delay {settings['delay_between_requests']}

echo "Generated $(python -c "import json; data=json.load(open('{output_file}')); print(len(data.get('expression_pairs', [])))" 2>/dev/null || echo "?") diversified pairs"

"""
    else:
        base_script += """
# Step 2: LLM Diversification (DISABLED)
echo "Step 2: LLM Diversification is disabled in configuration"
"""
    
    # Add finalization steps
    base_script += """
# Step 3: Finalization
echo "Step 3: Finalizing..."

echo "=== Pipeline completed at $(date) ==="
echo "Generated files:"
ls -la $OUTPUT_DIR/clevr_ref+_rearrangements*.json 2>/dev/null || echo "No files found"
"""
    
    return base_script

def create_config_template():
    """Create a configuration template file"""
    config_template = {
        "llm_diversification": {
            "enabled": True,
            "providers": {
                "openai": {
                    "enabled": True,
                    "api_key": "your-openai-api-key-here",
                    "models": ["gpt-3.5-turbo"]
                },
                "anthropic": {
                    "enabled": False,
                    "api_key": "your-anthropic-api-key-here", 
                    "models": ["claude-3-opus-20240229"]
                }
            },
            "settings": {
                "max_variations": 2,
                "temperature": 0.8,
                "max_pairs_per_run": 50,
                "delay_between_requests": 1.0
            }
        }
    }
    
    with open("rearrangement_llm_config.json", "w") as f:
        json.dump(config_template, f, indent=2)
    
    print("Created configuration template: rearrangement_llm_config.json")

def validate_config(config: Dict[str, Any]) -> List[str]:
    """Validate the configuration and return any issues"""
    issues = []
    
    llm_config = config.get("llm_diversification", {})
    if not llm_config.get("enabled", False):
        return issues  # No issues if not enabled
    
    providers = llm_config.get("providers", {})
    if not any(provider.get("enabled", False) for provider in providers.values()):
        issues.append("LLM diversification is enabled but no providers are enabled")
    
    for provider_name, provider_config in providers.items():
        if provider_config.get("enabled", False):
            if not provider_config.get("api_key"):
                issues.append(f"Provider {provider_name} is enabled but has no API key")
            
            if not provider_config.get("models"):
                issues.append(f"Provider {provider_name} has no models configured")
    
    return issues

def main():
    parser = argparse.ArgumentParser(description='Integrate LLM diversification into rearrangement generation pipeline')
    parser.add_argument('--config', default='rearrangement_llm_config.json',
                       help='Configuration file path')
    parser.add_argument('--create-config', action='store_true',
                       help='Create a configuration template file')
    parser.add_argument('--validate-only', action='store_true',
                       help='Only validate configuration without creating pipeline')
    parser.add_argument('--output-script', default='run_rearrangement_with_llm.sh',
                       help='Output script filename')
    
    args = parser.parse_args()
    
    if args.create_config:
        create_config_template()
        return
    
    # Load configuration
    config = load_pipeline_config(args.config)
    
    # Validate configuration
    issues = validate_config(config)
    if issues:
        print("Configuration issues found:")
        for issue in issues:
            print(f"  - {issue}")
        
        if args.validate_only:
            return
        
        print("\nNote: You can continue, but make sure to update your configuration with valid API keys.")
    
    # Create enhanced pipeline script
    pipeline_script = create_diversified_pipeline_script(config)
    
    # Write script to file
    with open(args.output_script, 'w') as f:
        f.write(pipeline_script)
    
    # Make script executable
    os.chmod(args.output_script, 0o755)
    
    print(f"Created enhanced pipeline script: {args.output_script}")
    
    if config.get("llm_diversification", {}).get("enabled", False):
        print("\nLLM diversification is ENABLED in the pipeline.")
        print("Make sure to:")
        print("1. Set valid API keys in the configuration file")
        print("2. Test with a small sample first")
        print("3. Monitor API usage and costs")
    else:
        print("\nLLM diversification is DISABLED in the pipeline.")
        print("Edit the configuration file to enable it.")

if __name__ == '__main__':
    main()


