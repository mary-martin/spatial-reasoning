#!/usr/bin/env python3
"""
Demo Script for Scene Graph Visualization with Referent Highlighting

This script demonstrates how to use the scene graph visualization tools
to explore how different referring expressions identify different objects in a scene.
"""

import os
import sys
import subprocess

def run_command(cmd, description):
    """Run a command and print the description"""
    print(f"\n{'='*60}")
    print(f"DEMO: {description}")
    print(f"{'='*60}")
    print(f"Running: {cmd}")
    print()
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("✓ Command completed successfully!")
            if result.stdout:
                print("Output:", result.stdout)
        else:
            print("✗ Command failed!")
            if result.stderr:
                print("Error:", result.stderr)
    except Exception as e:
        print(f"✗ Exception occurred: {e}")

def main():
    """Main demo function"""
    print("SCENE GRAPH VISUALIZATION DEMO")
    print("=" * 60)
    print("This demo shows how to visualize scene graphs with highlighted referents")
    print("based on referring expressions generated by the refexp generation pipeline.")
    
    # Check if required files exist
    scene_file = "custom_clevr/output/clevr_ref+_scenes.json"
    refexp_file = "custom_clevr/output/clevr_ref+_refexps_full_examples.json"
    
    if not os.path.exists(scene_file):
        print(f"\n❌ Scene file not found: {scene_file}")
        print("Please make sure you have generated the scene data first.")
        return
    
    if not os.path.exists(refexp_file):
        print(f"\n❌ Referring expressions file not found: {refexp_file}")
        print("Please make sure you have generated the referring expressions first.")
        return
    
    print(f"\n✓ Found scene file: {scene_file}")
    print(f"✓ Found referring expressions file: {refexp_file}")
    
    # Demo 1: Single referring expression visualization
    run_command(
        f"python visualize_scene_graph_with_referent.py --scene_file {scene_file} --refexp_file {refexp_file} --scene_idx 0 --refexp_idx 0 --save_path demo_single_refexp.png --no_show",
        "Single Referring Expression Visualization"
    )
    
    # Demo 2: Different referring expression for the same scene
    run_command(
        f"python visualize_scene_graph_with_referent.py --scene_file {scene_file} --refexp_file {refexp_file} --scene_idx 0 --refexp_idx 1 --save_path demo_different_refexp.png --no_show",
        "Different Referring Expression for Same Scene"
    )
    
    # Demo 3: Batch visualization showing multiple referring expressions
    run_command(
        f"python batch_visualize_scene_graphs.py --scene_file {scene_file} --refexp_file {refexp_file} --scene_idx 0 --max_refexps 4 --save_path demo_batch_visualization.png --no_show",
        "Batch Visualization - Multiple Referring Expressions"
    )
    
    # Demo 4: Different scene
    run_command(
        f"python visualize_scene_graph_with_referent.py --scene_file {scene_file} --refexp_file {refexp_file} --scene_idx 1 --refexp_idx 0 --save_path demo_different_scene.png --no_show",
        "Different Scene Visualization"
    )
    
    print(f"\n{'='*60}")
    print("DEMO COMPLETE!")
    print(f"{'='*60}")
    print("Generated visualization files:")
    print("  - demo_single_refexp.png")
    print("  - demo_different_refexp.png") 
    print("  - demo_batch_visualization.png")
    print("  - demo_different_scene.png")
    print("\nThese files show:")
    print("  • Scene graphs with objects as nodes and spatial relationships as edges")
    print("  • Referent objects highlighted in red")
    print("  • How different referring expressions identify different objects")
    print("  • Object properties (color, shape, size, material)")
    print("  • Spatial relationships (left, right, front, behind, between, etc.)")
    
    print(f"\n{'='*60}")
    print("USAGE EXAMPLES:")
    print(f"{'='*60}")
    print("# Visualize a specific referring expression:")
    print("python visualize_scene_graph_with_referent.py \\")
    print("  --scene_file custom_clevr/output/clevr_ref+_scenes.json \\")
    print("  --refexp_file custom_clevr/output/clevr_ref+_refexps_full_examples.json \\")
    print("  --scene_idx 0 --refexp_idx 2")
    print()
    print("# Create batch visualization:")
    print("python batch_visualize_scene_graphs.py \\")
    print("  --scene_file custom_clevr/output/clevr_ref+_scenes.json \\")
    print("  --refexp_file custom_clevr/output/clevr_ref+_refexps_full_examples.json \\")
    print("  --scene_idx 0 --max_refexps 6 --save_path my_visualization.png")

if __name__ == "__main__":
    main()
